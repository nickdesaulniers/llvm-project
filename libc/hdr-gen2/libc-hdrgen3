#!/usr/bin/env python3

import argparse
import yaml
from pathlib import Path

def get_args():
  parser = argparse.ArgumentParser(description="")
  parser.add_argument("deffile", help="Path to the .h.def file", metavar="def")
  parser.add_argument("input", help="")
  parser.add_argument("-e", "--entrypoints", action="extend", nargs="+",
                      help="a repeatable list of entrypoints", metavar="entrypoint")
  return parser.parse_args()

def parse_input(fname):
  with open(fname) as f:
    return yaml.load(f, Loader=yaml.FullLoader)

def get_base_fname(fname):
  # Expect foo.def.h
  assert fname.suffixes[0] == ".h"
  assert fname.suffixes[1] == ".def"
  return fname.stem

def filter_declarations(declarations, entrypoints):
  if entrypoints == None:
    return
  filtered_idents = set(declarations) - set(entrypoints)
  for filtered_ident in filtered_idents:
    del declarations[filtered_ident]

def expand_declaration(ident, sig):
  max_i = len(sig["params"]) - 1
  decl = sig["returns"] + " " + ident + " ("
  for i, param in enumerate(sig["params"]):
    decl += param
    if i != max_i:
      decl += ", "
  decl += ");"
  return decl

def expand_declarations(declarations):
  decls = []
  for identifier, signature in declarations.items():
    decls.append(expand_declaration(identifier, signature))
  return "\n".join(decls)

def interpolate_declarations_into_header(declarations, deffile):
  with open(deffile) as f:
    template = f.read()
  return template.replace('%%public_api()', expand_declarations(declarations))

if __name__ == "__main__":
  args = get_args()
  declarations = parse_input(Path(args.input))
  # TODO: hdr-gen allowed for --header to specify a specific header file
  base_fname = get_base_fname(Path(args.deffile))

  # check that string.h was listed in the yaml file
  assert base_fname in declarations
  filter_declarations(declarations[base_fname], args.entrypoints)
  header = interpolate_declarations_into_header(declarations[base_fname], Path(args.deffile))
  # TODO: support for -o
  print(header)
